#!/bin/sh
# forkm: fork management tool
# SPDX-License-Identifier: GPL-3.0-only
#
# Copyright (C) 2025 45mg
#
# This file is part of forkm.
#
# forkm is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 3
# as published by the Free Software Foundation.
#
# forkm is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with forkm. If not, see <http://www.gnu.org/licenses/>.

set -eu

export FORKM_VERSION=0.1.0
FORKM_PATH="$(dirname "$0")"
export FORKM_PATH

. "${FORKM_PATH}"/forkm--util

show_help() {
    cat <<EOF
usage: forkm [OPTIONS...] COMMAND ARGS...

Run COMMAND with ARGS, if given.

COMMAND must be one of the sub-commands listed below:

track | add    track a patch branch
untrack | rm   untrack a patch branch
list | ls      list tracked patch branches

bump           rebase patch branches onto the branch tip
patch          cherry-pick patch branches and merge them in
unpatch        undo the 'patch' command
update         get new commits from an upstream branch

OPTOINS may be:
-R DIRECTORY   use repository in DIRECTORY
-v, --verbose  run with 'set -x'
-h, --help     show this message and exit
-V, --version  show version information and exit
EOF
}

if [ $# -eq 0 ]; then
    show_help
    exit 1
fi


while [ $# -gt 0 ]; do
    case $1 in
        -R)
            if [ $# -lt 2 ]; then
                util_error "'-R' requires an argument"
                exit 1
            fi
            shift
            # We export GIT_DIR and GIT_WORK_TREE to tell subcommands where to
            # find these things.
            unset GIT_DIR
            GIT_DIR="$(git -C "$1" rev-parse --path-format=absolute --git-dir)"
            GIT_COMMON_DIR="$(git -C "$1" rev-parse --path-format=absolute --git-common-dir)"
            GIT_WORK_TREE="$(git -C "$1" rev-parse --show-toplevel)" # absolute by default
            export GIT_DIR GIT_COMMON_DIR GIT_WORK_TREE
            shift
            ;;
        -v | --verbose)
            set -x
            shift
            ;;
        -V | --version)
            printf "forkm: version %s\n" "${FORKM_VERSION}"
            exit 0
            ;;
        -h | --help)
            show_help
            exit 0
            ;;
        -*)
            util_error "Invalid flag '$1'"
            show_help
            exit 1
            ;;
        *) # not a flag; handle this as subcommand and pass further args to it
            break
            ;;
    esac
done

if [ $# -eq 0 ]; then
    show_help
    exit 1
fi

# Set the following from the current directory if they're unset.
if [ -z ${GIT_DIR+x} ]; then
    GIT_DIR="$(git rev-parse --path-format=absolute --git-dir)"
    export GIT_DIR
fi
if [ -z ${GIT_COMMON_DIR+x} ]; then
    GIT_COMMON_DIR="$(git rev-parse --path-format=absolute --git-common-dir)"
    export GIT_COMMON_DIR
fi
if [ -z ${GIT_WORK_TREE+x} ]; then
    # Not all commands require a worktree, but we set this for the ones that do:
    GIT_WORK_TREE="$(git rev-parse --show-toplevel)"
    export GIT_WORK_TREE
fi


forkm_command="$1"
shift

case "${forkm_command}" in
    track | add)
        "${FORKM_PATH}"/forkm-track "$@"
        ;;
    untrack | rm)
        "${FORKM_PATH}"/forkm-untrack "$@"
        ;;
    list | ls)
        "${FORKM_PATH}"/forkm-list "$@"
        ;;
    bump)
        "${FORKM_PATH}"/forkm-bump "$@"
        ;;
    patch)
        "${FORKM_PATH}"/forkm-patch "$@"
        ;;
    unpatch)
        "${FORKM_PATH}"/forkm-unpatch "$@"
        ;;
    update)
        "${FORKM_PATH}"/forkm-update "$@"
        ;;
    *)
        util_error "invalid command"
        show_help
        exit 1
        ;;
esac
