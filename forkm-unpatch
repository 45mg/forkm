#!/bin/sh
# TODO license etc

set -eu
. "${FORKM_PATH}"/forkm--util

show_help() {
    cat <<EOF
usage: forkm unpatch <fork_branch> [<upstream_branch>]

Undo the results of 'forkm patch': 'unmerge' the merged-in branches.

More precisely, revert every merge commit in <fork_branch> whose second parent
is pointed to by a branch named '<fork_branch>_<branch>', where <branch> is any
tracked fork branch.

Only considers merge commits after (ie. not reachable from) <upstream_branch>.
<upstream_branch> defaults to 'main' or 'master', in that order; you can specify
any ref or commit.

Options:
-l, --lax      unmerge any branch whose name starts with '<fork_branch>_'
               (without checking if the rest of its name corresponds to a
               tracked patch branch)
-d, --dry-run      print, without executing, the commands that would be run
-q, --quiet        no warnings or info messages
-h, --help     show this message and exit
-V, --version  show version information and exit
EOF
}

if [ $# -eq 0 ]; then
    show_help
    exit 1
fi

lax=0
dry_run=0
quiet=0
# Parse flags
while [ $# -ne 0 ]; do
    case $1 in
        -h | --help)
            show_help
            exit 0
            ;;
        -V | --version)
            printf "forkm: version %s\n" "${FORKM_VERSION}"
            exit 0
            ;;
        -l | --lax)
            lax=1
            shift
            ;;
        -d | --dry-run)
            dry_run=1
            shift
            ;;
        -q | --quiet)
            quiet=1
            shift
            ;;
        -*) # Invalid options.
            util_error "Invalid flag '$1'"
            show_help
            exit 1
            ;;
        *)
            # Not a flag
            break
            ;;
    esac
done

if [ $# -eq 0 ] || [ $# -gt 2 ]; then
    show_help
    exit 1
fi
fork="$1"
shift
upstream=""
if [ $# -eq 1 ]; then
    upstream="$1"
else
    read -r upstream <<EOF
	$("${FORKM_PATH}"/forkm--upstream-branch-name)
EOF
fi

globmatch () {
    case "$2" in
        $1)
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}

# merges reachable from $fork, but not from $upstream
merge_commits=$(git rev-list --merges ^"${upstream}" "${fork}")
# list of tracked branches
patch_branch_list=""
# if $lax is true, we won't check if a branch is in $patch_branch_list, so no
# point setting it
if [ ${lax} -eq 0 ]; then
    patch_branch_list="$("${FORKM_PATH}"/forkm-list --oneline)"
fi

git=git
if [ ${dry_run} -ne 0 ]; then
    git="echo git"
fi

for merge in ${merge_commits}; do
    second_parent="$(git rev-parse "${merge}"^2)"
    branches="$(git branch --points-at="${second_parent}" --format='%(refname:short)')"
    do_unmerge=0
    for branch in ${branches}; do
        if globmatch "${fork}_*" "${branch}"; then
            patch_branch="${branch##"${fork}"_}"
             # if it doesn't have ${fork} prefix, we'll skip it either way
            if [ "${branch}" = "${patch_branch}" ]; then
                continue
            fi
            # if $lax is true, we don't need to consider any further conditions
            if [ ${lax} -eq 1 ]; then
                do_unmerge=1
                break
            elif [ ${lax} -eq 0 ] &&
                     # check if it's in $patch_branch_list
                     globmatch "*${patch_branch}*" "${patch_branch_list}"; then
                do_unmerge=1
                break
            fi
            break
        fi
    done
    if [ ${do_unmerge} -eq 1 ]; then
        ${git} checkout --quiet "${fork}"
        # --mainline 1 to always revert relative to the first parent (since
        # --patch branches are only every merged $into fork, not the other way
        # --round)
        ${git} revert --no-edit --mainline 1 -- "${merge}"
    fi
done
