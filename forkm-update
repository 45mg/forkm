#!/bin/sh
# forkm: fork management tool
# SPDX-License-Identifier: GPL-3.0-only
#
# Copyright (C) 2025 45mg
#
# This file is part of forkm.
#
# forkm is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 3
# as published by the Free Software Foundation.
#
# forkm is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with forkm. If not, see <http://www.gnu.org/licenses/>.

set -eu
. "${FORKM_PATH}"/forkm--util

show_help() {
    cat <<EOF
usage: forkm update <fork_branch> [<upstream_branch>]

Apply new commits from <upstream_branch> to <fork_branch>.

Defaults to merging <upstream_branch> into <fork_branch>, but can also rebase
commits (see options).

Uses the '-X ours' merge strategy option to favor <fork_branch> in all
conflicts. (Hence, direct commits to <fork_branch> only contain changes that
should always override <upstream_branch>; any other changes should be done using
patch branches.)

<upstream_branch> defaults to 'main' or 'master', in that order; you can specify
any ref or commit.

Options:
-r, --rebase BASE  intead of merging, rebase commits starting from BASE onto
                   <fork_branch>. This will tag <upstream_branch> to make
                   specifying BASE easier next time.
-d, --dry-run      print, without executing, the commands that would be run
-q, --quiet        no warnings or info messages
-v, --verbose      run with 'set -x'
-h, --help         show this message and exit
-V, --version      show version information and exit
EOF
}

if [ $# -eq 0 ]; then
    show_help
    exit 1
fi

rebase=0
dry_run=0
quiet=0
# Parse flags
while [ $# -gt 0 ]; do
    case $1 in
        -h | --help)
            show_help
            exit 0
            ;;
        -V | --version)
            printf "forkm: version %s\n" "${FORKM_VERSION}"
            exit 0
            ;;
        -r | --rebase)
            if [ $# -lt 2 ]; then
                util_error "'--rebase' requires an argument"
                exit 1
            fi
            rebase=1
            shift
            base="$1"
            shift
            ;;
        -d | --dry-run)
            dry_run=1
            shift
            ;;
        -q | --quiet)
            quiet=1
            shift
            ;;
        -v | --verbose)
            set -x
            shift
            ;;
        -*) # Invalid options.
            util_error "Invalid flag '$1'"
            show_help
            exit 1
            ;;
        *)
            # Ignore anything else
            break
            ;;
    esac
done

if [ $# -eq 0 ] || [ $# -gt 2 ]; then
    show_help
    exit 1
fi
fork="$1"
shift
upstream=""
if [ $# -eq 1 ]; then
    upstream="$1"
else
    upstream="$(util_guess_upstream_branch)"
fi

git=git
if [ ${dry_run} -ne 0 ]; then
    git="echo git"
fi
if [ $rebase -ne 0 ]; then
    # XXX: '-X ours' means that fork changes will always win over upstream
    # changes.
    ${git} rebase --rebase-merges -X ours --empty=keep \
        --onto "${fork}" \
        -- "$(git rev-parse "${base}")" "$(git rev-parse "${upstream}")"
    ${git} branch --force -- "${fork}"
    # TODO allow disabling tagging; should it be done for merges?
    ${git} tag forkm_update_"$(TZ=UTC date '+%Y%m%d_%H%M%S_utc')" "${fork}"
    ${git} switch --quiet -- "${fork}"
else
    ${git} switch --quiet -- "${fork}"
    ${git} merge --no-edit -X ours -- "${upstream}"
fi
