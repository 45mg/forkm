# forkm(1) completion                                       -*- shell-script -*-
# forkm: fork management tool
# SPDX-License-Identifier: GPL-3.0-only
#
# Copyright (C) 2025 45mg
#
# This file is part of forkm.
#
# forkm is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 3
# as published by the Free Software Foundation.
#
# forkm is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with forkm. If not, see <http://www.gnu.org/licenses/>.

# We need to be able to use functions from Git's bash completions:
# https://web.git.kernel.org/pub/scm/git/git.git/tree/contrib/completion/git-completion.bash
# The easiest way to get these is to source the above file, as it suggests.
# We will attempt to load them using the loader functions from the
# bash-completion package, if available.



_comp_cmd_forkm() {
    local cur="${COMP_WORDS[COMP_CWORD]}"
    local prev="${COMP_WORDS[COMP_CWORD-1]}"

    local argopts=" -R "
    local subcmds=" track add list ls untrack rm bump update patch unpatch "
    local subcmd
    local -a subcmd_args=()

    # Determine the current subcommand, if any.
    local i
    for((i=0;i<"${#COMP_WORDS[@]}";i++)); do
        local word="${COMP_WORDS[$i]}"
        # if the previous word wasn't an option to an arg...
        if [[ -z "${prev_word}" ]] || [[ "${argopts}" != *\ "${prev_word}"\ * ]]; then
            # and the current word is the name of a subcommand...
            if [[ "${subcmds}" == *\ "${word}"\ * ]]; then
                subcmd="${word}"
                break
            fi
        fi
        prev_word="${word}"
    done
    # Collect the remaining non-option arguments (subcommand args).
    # (remember, this includes the word currently being typed!)
    for((i=i+1;i<"${#COMP_WORDS[@]}";i++)); do
        local word="${COMP_WORDS[$i]}"
        case "${word}" in
            --)
                subcmd_args+=(${COMP_WORDS[@]:i})
                break
                ;;
            -*)
                continue
                ;;
            *)
                subcmd_args+=("${word}")
                ;;
        esac
    done

    if [[ "${cur}" == -* ]]; then
        # option names (from subcommands as well)
        if [[ -n "${subcmd}" ]]; then
            __comp_cmd_forkm__compgen_from_help forkm "${subcmd}" --help
        else
            __comp_cmd_forkm__compgen_from_help forkm --help
        fi
        return
    elif [[ -n "${subcmd}" ]]; then
        # subcommand args
        __comp_cmd_forkm_"${subcmd}"
        return
    elif [[ "${argopts}" == *\ "${prev}"\ * ]]; then
        # 'forkm' option args
        case "${prev}" in
            -R)
                COMPREPLY=( $(compgen -o dirnames -- "${cur}") )
                return
                ;;
        esac
    else
        # subcommand names
        COMPREPLY=( $(compgen -W "${subcmds}" -- "${cur}") )
        return
    fi
}



# Usage: __comp_cmd_forkm__compgen_help cmd args...
# Call CMD with ARGS, parse its output like GNU-style --help output, and add it
# to COMPREPLY.
# Example: _comp_cmd_forkm__compgen_help forkm patch --help
# Similar in spirit to _comp_compgen_help from bash-completion.
__comp_cmd_forkm__compgen_from_help() {
    # For every line from CMD output, try to extract options from it.
    local -a opts=()
    local line
    while read -r line; do
        # Does the line list options?
        if [[ "${line}" =~ ^[[:space:]]*- ]]; then
            local split word opt
            IFS=$' \t\n,/|' read -r -a split <<<"${line}"
            for word in "${split[@]}"; do
                # Prefer long options over short options from the same line.
                case "${word}" in
                    --?*)
                        opt="${word}"
                        break
                        ;;
                    -?*)
                        [ -z "${opt}" ] && opt="${word}"
                        ;;
                    *) break ;;
                esac
            done
            opts+=("${opt}")
        fi
    done <<<"$(LC_ALL=C "$@")"
    COMPREPLY=( $(compgen -W "${opts[*]}" -- "${cur}") )
    return
}

__comp_cmd_forkm_track() {
    __git_complete_refs --mode=heads
    return
}
__comp_cmd_forkm_add() {
    __comp_cmd_forkm_track
}

__comp_cmd_forkm_list() {
    return
}
__comp_cmd_forkm_ls() {
    __comp_cmd_forkm_list
}

__comp_cmd_forkm_untrack() {
    trackers="$(forkm list --oneline)"
    COMPREPLY=( $(compgen -W "${trackers}" -- "${cur}") )
    return
}
__comp_cmd_forkm_rm() {
    __comp_cmd_forkm_untrack
}

__comp_cmd_forkm_bump() {
    __git_complete_refs
    return
}

__comp_cmd_forkm_patch() {
    case "${prev}" in
        --base)
            __git_complete_refs
            return
    esac
    case "${#subcmd_args[@]}" in
        1)
            __git_complete_refs --mode=heads
            return
            ;;
        2)
            __git_complete_refs
            return
            ;;
        *)
            return
            ;;
    esac
}

__comp_cmd_forkm_unpatch() {
    case "${#subcmd_args[@]}" in
        1)
            __git_complete_refs --mode=heads
            return
            ;;
        2)
            __git_complete_refs
            return
            ;;
        *)
            return
            ;;
    esac
}

__comp_cmd_forkm_update() {
    __comp_cmd_forkm_unpatch # same arguments
}



if complete -p git 2>/dev/null ||
        # bash-completion loaders
        # (__load_completion was deprecated in favor of _comp_load in 2.12)
        _comp_load git 2>/dev/null || __load_completion git; then
    complete -F _comp_cmd_forkm forkm
fi
