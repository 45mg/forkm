#!/bin/sh
# forkm: fork management tool
# SPDX-License-Identifier: GPL-3.0-only
#
# Copyright (C) 2025 45mg
#
# This file is part of forkm.
#
# forkm is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 3
# as published by the Free Software Foundation.
#
# forkm is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with forkm. If not, see <http://www.gnu.org/licenses/>.

set -eu

FORKM_PATH="$(dirname "$0")"
FORKM_PATH="$(realpath "${FORKM_PATH}")"

echo "Pass '--debug' for extra output."
debug=0
if [ $# -ge 1 ] && [ "$1" = '--debug' ]; then
    debug=1
fi

cleanup() {
    if [ -d "${testdir}" ]; then
        chmod -Rf +w "${testdir}"
        rm -rf "${testdir}"
    fi
    if [ -d "${remotedir}" ]; then
        chmod -Rf +w "${remotedir}"
        rm -rf "${remotedir}"
    fi
}
testdir="$(mktemp -d)"
remotedir="$(mktemp -d)"
trap cleanup EXIT
if [ ${debug} -ne 0 ]; then
    echo "testdir: ${testdir}"
    echo "remotedir: ${remotedir}"
fi

git_C() {
    git -C "${testdir}" "$@"
}
git_C_quiet() {
    if [ ${debug}  -eq 1 ]; then
        git_C "$@"
    else
        git_C "$@" > /dev/null 2>&1
    fi
}
forkm_R() {
    "${FORKM_PATH}"/forkm -R "${testdir}" "$@"
}
forkm_R_quiet() {
    if [ ${debug}  -eq 1 ]; then
        forkm_R "$@"
    else
        forkm_R "$@" > /dev/null 2>&1
    fi
}

# Show only commit message subjects, in one line.
git_C_log_subject_only() {
    git_C -P log -z --pretty=format:%s "$1" | tr '\0' ' '
}
git_C_tags_oneline() {
    git_C -P tag -l --sort=refname | tr "\n" ' '
}

debug_git_C_log() {
    if [ ${debug} -eq 1 ]; then
        git_C --no-pager log --graph --all --oneline
    fi
}

init_repo() {
    mkdir -p "${testdir}"
    git_C_quiet init --initial-branch=main
    git_C_quiet config user.name forkm_test
    git_C_quiet config user.email forkm_test@no.mail
    git_C_quiet commit --allow-empty -m 'Initial commit'
    git_C_quiet tag init
}
init_remote() {
    cp -r "${testdir}"/.git "${remotedir}"
    git -C "${remotedir}" config core.bare true
    git_C_quiet remote add origin "${remotedir}"
}

echo "If any test fails, this script will immediately exit with a nonzero exit status."

echo "Testing that we have the commands we need..."
echo "...from coreutils"
command -v realpath > /dev/null || exit 1
command -v dirname > /dev/null || exit 1
command -v mkdir > /dev/null || exit 1
command -v mv > /dev/null || exit 1
command -v rm > /dev/null || exit 1
command -v cat > /dev/null || exit 1
command -v printf > /dev/null || exit 1
command -v tr > /dev/null || exit 1 # tests only
echo "...sed"
command -v sed > /dev/null || exit 1
echo "...git"
command -v git > /dev/null || exit 1

echo "Testing 'forkm track'..."
init_repo

echo "...on branches with no version suffix"
for b in b1 b2.a12; do
    git_C_quiet branch "$b"
    forkm_R_quiet track "$b"
    test "$(git_C rev-parse --symbolic-full-name refs/forkm/"$b")" \
        = refs/heads/"$b"
done

echo "...on branches with version suffixes"
git_C_quiet branch b3.12
git_C_quiet branch b4.1.23
forkm_R_quiet track b3.12 b4.1.23
test "$(git_C rev-parse --symbolic-full-name refs/forkm/b3)" \
    = refs/heads/b3.12
test "$(git_C rev-parse --symbolic-full-name refs/forkm/b4.1)" \
    = refs/heads/b4.1.23

echo "...on nonexistent branches (should not track)"
forkm_R_quiet track dangling
git_C_quiet rev-parse --symbolic-full-name refs/forkm/dangling &&
    exit 1

echo "Testing 'forkm list'..."
echo "...--quiet and --oneline output"
test "$(forkm_R list --quiet)" \
    = 'b1
b2.a12
b3.12
b4.1.23'
test "$(forkm_R list --oneline)" \
    = 'b1 b2.a12 b3.12 b4.1.23 '
echo "...output with dangling trackers"
git_C_quiet branch --quiet dangling
forkm_R_quiet track dangling
git_C_quiet branch --quiet -D dangling
test "$(forkm_R list --quiet)" \
    = 'b1
b2.a12
b3.12
b4.1.23'
echo "...when there are no trackers"
mv "${testdir}/.git/refs/forkm" "${testdir}/.git/refs/forkm_"
test -z "$(forkm_R list)"
mv "${testdir}/.git/refs/forkm_" "${testdir}/.git/refs/forkm"

echo "Testing 'forkm untrack'..."
echo "...on valid trackers"
forkm_R_quiet untrack b1 b2.a12
git_C_quiet rev-parse --symbolic-full-name refs/forkm/b1 &&
    exit 1
git_C_quiet rev-parse --symbolic-full-name refs/forkm/b2.a12 &&
    exit 1
echo "...on a dangling tracker"
forkm_R_quiet untrack dangling
git_C_quiet rev-parse --symbolic-full-name refs/forkm/dangling &&
    exit 1
echo "...--cleanup of all dangling trackers"
for i in 1 2 3; do
    git_C_quiet branch --quiet dangling"$i"
    forkm_R_quiet track dangling"$i"
    git_C_quiet branch --quiet -D dangling"$i"
done
forkm_R_quiet untrack --cleanup
for i in 1 2 3; do
    git_C_quiet rev-parse --symbolic-full-name refs/forkm/dangling"$i" &&
        exit 1
done
echo "...on a nonexistent tracker"
forkm_R_quiet untrack _nonexistent_

echo "Testing pushing to a remote without errors..."
init_remote
echo "...pushing main branch only"
git_C_quiet push --set-upstream origin main
echo "...pushing all refs"
git_C_quiet push origin '*:*'
echo "...pushing all refs after deleting a tracked branch"
git_C_quiet branch -D b3.12
git_C_quiet push origin '*:*'

# 'forkm list' and 'forkm untrack' need to loop over every file in the tracker
# directory. In a linked worktree, detecting the tracker directory is nontrivial
# (.git is a file, for example). Hence this test.
# TODO this is no longer the case. It's still good to test whether things work
# in linked worktrees, though. Maybe run all tests again with a linked worktree?
echo "Testing 'forkm list' and 'forkm untrack' in a linked worktree..."
cleanup
init_repo
git_C_quiet worktree add ./worktree
testdir_backup="${testdir}"
testdir="${testdir}"/worktree
git_C_quiet branch b
forkm_R_quiet track b
test "$(git_C rev-parse --symbolic-full-name refs/forkm/b)" \
    = refs/heads/b
forkm_R_quiet untrack b
git_C_quiet rev-parse --symbolic-full-name refs/forkm/b &&
    exit 1
testdir="${testdir_backup}"

init_fork() {
    init_repo
    git_C_quiet branch fork
    for i in 1 2 3; do
        git_C_quiet commit --allow-empty -m m"$i"
    done
    git_C_quiet switch fork
    git_C_quiet commit --allow-empty -m "f1"
    git_C_quiet tag fork_init
}

echo "Testing 'forkm update'..."

echo "...merges the right parents"
cleanup
init_fork
forkm_R_quiet update fork main
debug_git_C_log
test "$(git_C rev-parse HEAD^)" = "$(git_C rev-parse fork_init)"
test "$(git_C rev-parse HEAD^2)" = "$(git_C rev-parse main)"

# The next 2 cases depend on util_guess_upstream_branch, which is used in the
# remaining commands as well; so we don't directly test upstream branch
# detection for the other commands
echo "......detecting the 'main' branch as upstream"
cleanup
init_fork
forkm_R_quiet update fork
debug_git_C_log
test "$(git_C rev-parse HEAD^)" = "$(git_C rev-parse fork_init)"
test "$(git_C rev-parse HEAD^2)" = "$(git_C rev-parse main)"
echo "......detecting the 'master' branch as upstream"
cleanup
init_fork
git_C_quiet branch -m main master
forkm_R_quiet update fork
debug_git_C_log
test "$(git_C rev-parse HEAD^)" = "$(git_C rev-parse fork_init)"
test "$(git_C rev-parse HEAD^2)" = "$(git_C rev-parse master)"

echo "...rebases the right commits with --rebase-from"
cleanup
init_fork
debug_git_C_log
forkm_R_quiet update --rebase-from init fork
debug_git_C_log
test "$(git_C_log_subject_only init..)" \
    = 'm3 m2 m1 f1'

echo "......respects --no-tag"
cleanup
init_fork
debug_git_C_log
forkm_R_quiet update --no-tag --rebase-from init fork
debug_git_C_log
test "$(git_C_tags_oneline)" \
    = 'fork_init init '

echo "Testing 'forkm bump'..."

echo "...checking if each rebased branch is based on the given upstream..."

echo "......with branches without version suffixes"
cleanup
init_fork
for i in a b c; do
    git_C_quiet switch --create b"$i" main^
    forkm_R_quiet track b"$i"
    git_C_quiet commit --allow-empty -m b"$i"1
done
forkm_R_quiet bump
debug_git_C_log
for i in a b c; do
    test "$(git_C rev-parse b"$i".1^)" = "$(git_C rev-parse main)"
done

echo "......with version suffixes and --no-increment"
cleanup
init_fork
for i in a b c; do
    git_C_quiet switch --create b"$i".1 main^
    forkm_R_quiet track b"$i".1
    git_C_quiet commit --allow-empty -m b"$i"1
done
forkm_R_quiet bump -n
debug_git_C_log
for i in a b c; do
    test "$(git_C rev-parse b"$i".1^)" = "$(git_C rev-parse main)"
done

echo "......with arbitrary commit as upstream, and non-empty commits"
cleanup
init_fork
for i in a b c; do
    git_C_quiet switch --create b"$i" main~2
    forkm_R_quiet track b"$i"
    touch "${testdir}"/"$i"
    git_C_quiet add "$i"
    git_C_quiet commit -m b"$i"1
done
forkm_R_quiet bump main~
debug_git_C_log
for i in a b c; do
    test "$(git_C rev-parse b"$i".1^)" = "$(git_C rev-parse main~)"
done

echo "...doesn't increase the version suffix for up-to-date branches"
cleanup
init_fork
git_C_quiet switch --create b.1 main
forkm_R_quiet track b.1
git_C_quiet commit --allow-empty -m b1
forkm_R_quiet bump
debug_git_C_log
test "$(git_C rev-parse --branches='b.*')" = "$(git_C rev-parse b.1)"

echo "Testing 'forkm patch'..."

echo "...successfully cherry-picks into new branches (--only-pick)"
cleanup
init_fork
for i in a b c; do
    git_C_quiet switch --create b"$i" main
    forkm_R_quiet track b"$i"
    touch "${testdir}"/"$i"
    git_C_quiet add "$i"
    git_C_quiet commit -m b"$i"1
done
forkm_R_quiet patch -p fork
debug_git_C_log
for i in a b c; do
    test "$(git_C_log_subject_only fork_b"$i"^..fork_b"$i")" = b"$i"1
done

echo "...successfully merges those new branches (--only-merge)"
forkm_R_quiet patch -m fork
debug_git_C_log
# Each branch adds a file corresponding to its name, so if the branches were
# merged correctly, all 3 files will be present.
for i in a b c; do
    test -e "${testdir}"/"$i"
done

echo "...does both of the above in one go"
init_patched() {
    init_fork
    for i in a b c; do
        git_C_quiet switch --create b"$i" main
        forkm_R_quiet track b"$i"
        touch "${testdir}"/"$i"
        git_C_quiet add "$i"
        git_C_quiet commit -m b"$i"1
    done
    forkm_R_quiet patch fork
    debug_git_C_log
}
cleanup
init_patched
for i in a b c; do
    test -e "${testdir}"/"$i"
done

echo "...allows specifying commit to pick onto (--base)"
cleanup
init_fork # leaves us on branch 'fork'
git_C_quiet commit --allow-empty -m f2
base="$(git_C rev-parse HEAD)"
git_C_quiet switch --create b main
forkm_R_quiet track b
touch "${testdir}"/b1
git_C_quiet add b1
git_C_quiet commit -m b1
forkm_R_quiet patch --base "${base}" fork
debug_git_C_log
test "$(git_C rev-parse fork_b^)" = "${base}"

echo "...does nothing if the fork branch is already fully patched"
fork_tip="$(git_C rev-parse fork)"
forkm_R_quiet patch --base "${base}" fork
debug_git_C_log
git_C_quiet switch fork
test "$(git_C rev-parse fork)" = "${fork_tip}"

echo "Testing 'forkm unpatch'..."

echo "...undoes 'forkm patch'"
cleanup
init_patched
forkm_R_quiet unpatch fork fork_init
debug_git_C_log
for i in a b c; do
    test -e "${testdir}"/"$i" && exit 1
done

echo "...can work with untracked fork_ branches (--lax)"
cleanup
init_patched
for b in ba bb bc; do
    forkm_R_quiet untrack "$b"
done
forkm_R_quiet unpatch --lax fork fork_init
debug_git_C_log
for i in a b c; do
    test -e "${testdir}"/"$i" && exit 1
done

echo "All tests successful!"
exit 0
