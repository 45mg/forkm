#!/bin/sh
# forkm: fork management tool
# SPDX-License-Identifier: GPL-3.0-only
#
# Copyright (C) 2025 45mg
#
# This file is part of forkm.
#
# forkm is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 3
# as published by the Free Software Foundation.
#
# forkm is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with forkm. If not, see <http://www.gnu.org/licenses/>.

set -eu
. "${FORKM_PATH}"/forkm--util

show_help() {
    cat <<EOF
usage: forkm untrack <branch>...

Untrack one or more tracked patch branches.

Options:
-c, --cleanup  remove all dangling trackers
-v, --verbose  run with 'set -x'
-h, --help     show this message and exit
-V, --version  show version information and exit
EOF
}

if [ $# -eq 0 ]; then
    show_help
    exit 1
fi

cleanup() {
    for pair in $(util_tracker_target_pairs); do
        ref="${pair%%~*}"
        branch="${pair##*~}"
        if [ -z "$(git branch --list -- "${branch}")" ]; then
            git symbolic-ref -d "${ref}"
        fi
    done
}

branch_list=""
# Parse arguments
while [ $# -gt 0 ]; do
    case $1 in
        -h | --help)
            show_help
            exit 0
            ;;
        -V | --version)
            printf "forkm: version %s\n" "${FORKM_VERSION}"
            exit 0
            ;;
        -c | --cleanup)
            cleanup
            exit 0
            ;;
        -v | --verbose)
            set -x
            shift
            ;;
        -*) # Invalid options.
            util_error "Invalid flag '$1'"
            show_help
            exit 1
            ;;
        *)
            # We have a flagless option; add it as one of the branches.
            branch_list="${branch_list} $1"
            shift
            ;;
    esac
done

for branch in ${branch_list}; do
    untracked=0
    nonexistent=0

    read -r name _ <<-EOF
	$(util_split_branch_name "${branch}")
	EOF
    if ! git symbolic-ref --short -- refs/forkm/"${name}" >/dev/null 2>&1; then
        untracked=1
    fi
    if [ -z "$(git branch --list -- "${branch}")" ]; then
        nonexistent=1
    fi

    if [ $nonexistent -eq 1 ] && [ $untracked -eq 1 ]; then
        util_warn "branch '${branch}' nonexistent and untracked; skipping"
        continue
    elif [ $nonexistent -eq 0 ] && [ $untracked -eq 1 ]; then
        util_warn "branch '${branch}' untracked; skipping"
        continue
    fi

    if [ $nonexistent -eq 1 ] && [ $untracked -eq 0 ]; then
        util_warn "removing dangling tracker for nonexistent branch '${branch}'"
    fi
    git symbolic-ref -d -- refs/forkm/"${name}"
done
