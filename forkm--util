#!/bin/sh
# forkm: fork management tool
# SPDX-License-Identifier: GPL-3.0-only
#
# Copyright (C) 2025 45mg
#
# This file is part of forkm.
#
# forkm is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 3
# as published by the Free Software Foundation.
#
# forkm is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with forkm. If not, see <http://www.gnu.org/licenses/>.

# This file is meant to be sourced inside other files.

FORKM_COMMAND="$(basename "$0")"

util_info() {
    if [ -z ${quiet+x} ] || [ "${quiet}" -eq 0 ]; then
        printf "${FORKM_COMMAND}: %s\n" "$*"
    fi
}
util_warn() {
    if [ -z ${quiet+x} ] || [ "${quiet}" -eq 0 ]; then
        printf >&2 "${FORKM_COMMAND}: warning: %s\n" "$*"
    fi
}
util_error() {
    printf >&2 "${FORKM_COMMAND}: error: %s\n" "$*"
}

util_globmatch () {
    case "$2" in
        $1)
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}

util_guess_upstream_branch() {
    if [ -n "$(git branch --list main)" ]; then
        printf '%s' main
    elif [ -n "$(git branch --list master)" ]; then
        printf '%s' master
    else
        util_error "unable to determine upstream branch name"
        exit 1
    fi
}

# Attempt to split the version number suffix from a branch name.
# eg. split 'foo-bar-v3.2' into 'foo-bar-v3' and '2'.
# If we succeed, output the branch name and version number separated by a space.
# Otherwise, output the original input.
util_split_branch_name() {
    name=$(echo "$1" | sed -E 's/\.[0-9]+$//')
    version_suffix=
    if [ "${name}" != "$1" ]; then
        version_suffix="${1##"$name"}"
        version_number="${version_suffix##.}"
        printf '%s %s' "${name}" "${version_number}"
    else
        printf '%s' "$1"
    fi
}

# Get all trackers and their targets.
# We use '~' as the separator here because it's invalid in refnames
# (see git-check-ref-format(1))
util_tracker_target_pairs() {
    git for-each-ref \
        --format='%(refname:lstrip=2)~%(symref:lstrip=2)' \
        'refs/forkm/*'
}
